// src/keypair.ts
import { Keypair, PublicKey } from "@solana/web3.js";
import bs from "bs58";
var KeypairAccount = class _KeypairAccount {
  secret;
  pubkey;
  constructor(params) {
    if (!params.pubkey) {
      const keypair = params.secret.toKeypair();
      this.pubkey = keypair.publicKey.toString();
    } else {
      this.pubkey = params.pubkey;
    }
    this.secret = params.secret;
  }
  toPublicKey() {
    return new PublicKey(this.pubkey);
  }
  toKeypair() {
    const decoded = bs.decode(this.secret);
    return Keypair.fromSecretKey(decoded);
  }
  static isPubkey = (value) => /^[0-9a-zA-Z]{32,44}$/.test(value);
  static isSecret = (value) => /^[0-9a-zA-Z]{87,88}$/.test(value);
  static create = () => {
    const keypair = Keypair.generate();
    return new _KeypairAccount({
      pubkey: keypair.publicKey.toString(),
      secret: bs.encode(keypair.secretKey)
    });
  };
  static toKeyPair = (keypair) => {
    return new _KeypairAccount({
      pubkey: keypair.publicKey.toString(),
      secret: bs.encode(keypair.secretKey)
    });
  };
};

// src/pda.ts
import { PublicKey as PublicKey2 } from "@solana/web3.js";
import { PROGRAM_ID } from "@metaplex-foundation/mpl-token-metadata";
var Pda;
((Pda2) => {
  Pda2.getMetadata = (mint) => {
    const [publicKey] = PublicKey2.findProgramAddressSync(
      [
        Buffer.from("metadata"),
        PROGRAM_ID.toBuffer(),
        mint.toPublicKey().toBuffer()
      ],
      PROGRAM_ID
    );
    return publicKey;
  };
  Pda2.getMasterEdition = (mint) => {
    const [publicKey] = PublicKey2.findProgramAddressSync(
      [
        Buffer.from("metadata"),
        PROGRAM_ID.toBuffer(),
        mint.toPublicKey().toBuffer(),
        Buffer.from("edition")
      ],
      PROGRAM_ID
    );
    return publicKey;
  };
})(Pda || (Pda = {}));
export {
  KeypairAccount,
  Pda
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2tleXBhaXIudHMiLCAiLi4vc3JjL3BkYS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgS2V5cGFpciwgUHVibGljS2V5IH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJztcbmltcG9ydCB7IFB1YmtleSwgU2VjcmV0IH0gZnJvbSAndHlwZXMvYWNjb3VudCc7XG5pbXBvcnQgYnMgZnJvbSAnYnM1OCc7XG5cbmV4cG9ydCBjbGFzcyBLZXlwYWlyQWNjb3VudCB7XG4gIHNlY3JldDogU2VjcmV0O1xuICBwdWJrZXk6IFB1YmtleTtcblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IHsgcHVia2V5PzogUHVia2V5OyBzZWNyZXQ6IFNlY3JldCB9KSB7XG4gICAgaWYgKCFwYXJhbXMucHVia2V5KSB7XG4gICAgICBjb25zdCBrZXlwYWlyID0gcGFyYW1zLnNlY3JldC50b0tleXBhaXIoKTtcbiAgICAgIHRoaXMucHVia2V5ID0ga2V5cGFpci5wdWJsaWNLZXkudG9TdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdWJrZXkgPSBwYXJhbXMucHVia2V5O1xuICAgIH1cbiAgICB0aGlzLnNlY3JldCA9IHBhcmFtcy5zZWNyZXQ7XG4gIH1cblxuICB0b1B1YmxpY0tleSgpOiBQdWJsaWNLZXkge1xuICAgIHJldHVybiBuZXcgUHVibGljS2V5KHRoaXMucHVia2V5KTtcbiAgfVxuXG4gIHRvS2V5cGFpcigpOiBLZXlwYWlyIHtcbiAgICBjb25zdCBkZWNvZGVkID0gYnMuZGVjb2RlKHRoaXMuc2VjcmV0KTtcbiAgICByZXR1cm4gS2V5cGFpci5mcm9tU2VjcmV0S2V5KGRlY29kZWQpO1xuICB9XG5cbiAgc3RhdGljIGlzUHVia2V5ID0gKHZhbHVlOiBzdHJpbmcpOiB2YWx1ZSBpcyBQdWJrZXkgPT5cbiAgICAvXlswLTlhLXpBLVpdezMyLDQ0fSQvLnRlc3QodmFsdWUpO1xuXG4gIHN0YXRpYyBpc1NlY3JldCA9ICh2YWx1ZTogc3RyaW5nKTogdmFsdWUgaXMgU2VjcmV0ID0+XG4gICAgL15bMC05YS16QS1aXXs4Nyw4OH0kLy50ZXN0KHZhbHVlKTtcblxuICBzdGF0aWMgY3JlYXRlID0gKCk6IEtleXBhaXJBY2NvdW50ID0+IHtcbiAgICBjb25zdCBrZXlwYWlyID0gS2V5cGFpci5nZW5lcmF0ZSgpO1xuICAgIHJldHVybiBuZXcgS2V5cGFpckFjY291bnQoe1xuICAgICAgcHVia2V5OiBrZXlwYWlyLnB1YmxpY0tleS50b1N0cmluZygpIGFzIFB1YmtleSxcbiAgICAgIHNlY3JldDogYnMuZW5jb2RlKGtleXBhaXIuc2VjcmV0S2V5KSBhcyBTZWNyZXQsXG4gICAgfSk7XG4gIH07XG5cbiAgc3RhdGljIHRvS2V5UGFpciA9IChrZXlwYWlyOiBLZXlwYWlyKTogS2V5cGFpckFjY291bnQgPT4ge1xuICAgIHJldHVybiBuZXcgS2V5cGFpckFjY291bnQoe1xuICAgICAgcHVia2V5OiBrZXlwYWlyLnB1YmxpY0tleS50b1N0cmluZygpIGFzIFB1YmtleSxcbiAgICAgIHNlY3JldDogYnMuZW5jb2RlKGtleXBhaXIuc2VjcmV0S2V5KSBhcyBTZWNyZXQsXG4gICAgfSk7XG4gIH07XG59XG4iLCAiaW1wb3J0IHsgUHVibGljS2V5IH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJztcbmltcG9ydCB7IFBST0dSQU1fSUQgfSBmcm9tICdAbWV0YXBsZXgtZm91bmRhdGlvbi9tcGwtdG9rZW4tbWV0YWRhdGEnO1xuaW1wb3J0IHsgUHVia2V5IH0gZnJvbSAnQHNvbGFuYS1zdWl0ZS9zaGFyZWQnO1xuXG5leHBvcnQgbmFtZXNwYWNlIFBkYSB7XG4gIGV4cG9ydCBjb25zdCBnZXRNZXRhZGF0YSA9IChtaW50OiBQdWJrZXkpOiBQdWJsaWNLZXkgPT4ge1xuICAgIGNvbnN0IFtwdWJsaWNLZXldID0gUHVibGljS2V5LmZpbmRQcm9ncmFtQWRkcmVzc1N5bmMoXG4gICAgICBbXG4gICAgICAgIEJ1ZmZlci5mcm9tKCdtZXRhZGF0YScpLFxuICAgICAgICBQUk9HUkFNX0lELnRvQnVmZmVyKCksXG4gICAgICAgIG1pbnQudG9QdWJsaWNLZXkoKS50b0J1ZmZlcigpLFxuICAgICAgXSxcbiAgICAgIFBST0dSQU1fSUQsXG4gICAgKTtcbiAgICByZXR1cm4gcHVibGljS2V5O1xuICB9O1xuXG4gIGV4cG9ydCBjb25zdCBnZXRNYXN0ZXJFZGl0aW9uID0gKG1pbnQ6IFB1YmtleSk6IFB1YmxpY0tleSA9PiB7XG4gICAgY29uc3QgW3B1YmxpY0tleV0gPSBQdWJsaWNLZXkuZmluZFByb2dyYW1BZGRyZXNzU3luYyhcbiAgICAgIFtcbiAgICAgICAgQnVmZmVyLmZyb20oJ21ldGFkYXRhJyksXG4gICAgICAgIFBST0dSQU1fSUQudG9CdWZmZXIoKSxcbiAgICAgICAgbWludC50b1B1YmxpY0tleSgpLnRvQnVmZmVyKCksXG4gICAgICAgIEJ1ZmZlci5mcm9tKCdlZGl0aW9uJyksXG4gICAgICBdLFxuICAgICAgUFJPR1JBTV9JRCxcbiAgICApO1xuICAgIHJldHVybiBwdWJsaWNLZXk7XG4gIH07XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxTQUFTLGlCQUFpQjtBQUVuQyxPQUFPLFFBQVE7QUFFUixJQUFNLGlCQUFOLE1BQU0sZ0JBQWU7QUFBQSxFQUMxQjtBQUFBLEVBQ0E7QUFBQSxFQUVBLFlBQVksUUFBNkM7QUFDdkQsUUFBSSxDQUFDLE9BQU8sUUFBUTtBQUNsQixZQUFNLFVBQVUsT0FBTyxPQUFPLFVBQVU7QUFDeEMsV0FBSyxTQUFTLFFBQVEsVUFBVSxTQUFTO0FBQUEsSUFDM0MsT0FBTztBQUNMLFdBQUssU0FBUyxPQUFPO0FBQUEsSUFDdkI7QUFDQSxTQUFLLFNBQVMsT0FBTztBQUFBLEVBQ3ZCO0FBQUEsRUFFQSxjQUF5QjtBQUN2QixXQUFPLElBQUksVUFBVSxLQUFLLE1BQU07QUFBQSxFQUNsQztBQUFBLEVBRUEsWUFBcUI7QUFDbkIsVUFBTSxVQUFVLEdBQUcsT0FBTyxLQUFLLE1BQU07QUFDckMsV0FBTyxRQUFRLGNBQWMsT0FBTztBQUFBLEVBQ3RDO0FBQUEsRUFFQSxPQUFPLFdBQVcsQ0FBQyxVQUNqQix1QkFBdUIsS0FBSyxLQUFLO0FBQUEsRUFFbkMsT0FBTyxXQUFXLENBQUMsVUFDakIsdUJBQXVCLEtBQUssS0FBSztBQUFBLEVBRW5DLE9BQU8sU0FBUyxNQUFzQjtBQUNwQyxVQUFNLFVBQVUsUUFBUSxTQUFTO0FBQ2pDLFdBQU8sSUFBSSxnQkFBZTtBQUFBLE1BQ3hCLFFBQVEsUUFBUSxVQUFVLFNBQVM7QUFBQSxNQUNuQyxRQUFRLEdBQUcsT0FBTyxRQUFRLFNBQVM7QUFBQSxJQUNyQyxDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRUEsT0FBTyxZQUFZLENBQUMsWUFBcUM7QUFDdkQsV0FBTyxJQUFJLGdCQUFlO0FBQUEsTUFDeEIsUUFBUSxRQUFRLFVBQVUsU0FBUztBQUFBLE1BQ25DLFFBQVEsR0FBRyxPQUFPLFFBQVEsU0FBUztBQUFBLElBQ3JDLENBQUM7QUFBQSxFQUNIO0FBQ0Y7OztBQy9DQSxTQUFTLGFBQUFBLGtCQUFpQjtBQUMxQixTQUFTLGtCQUFrQjtBQUdwQixJQUFVO0FBQUEsQ0FBVixDQUFVQyxTQUFWO0FBQ0UsRUFBTUEsS0FBQSxjQUFjLENBQUMsU0FBNEI7QUFDdEQsVUFBTSxDQUFDLFNBQVMsSUFBSUQsV0FBVTtBQUFBLE1BQzVCO0FBQUEsUUFDRSxPQUFPLEtBQUssVUFBVTtBQUFBLFFBQ3RCLFdBQVcsU0FBUztBQUFBLFFBQ3BCLEtBQUssWUFBWSxFQUFFLFNBQVM7QUFBQSxNQUM5QjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFFTyxFQUFNQyxLQUFBLG1CQUFtQixDQUFDLFNBQTRCO0FBQzNELFVBQU0sQ0FBQyxTQUFTLElBQUlELFdBQVU7QUFBQSxNQUM1QjtBQUFBLFFBQ0UsT0FBTyxLQUFLLFVBQVU7QUFBQSxRQUN0QixXQUFXLFNBQVM7QUFBQSxRQUNwQixLQUFLLFlBQVksRUFBRSxTQUFTO0FBQUEsUUFDNUIsT0FBTyxLQUFLLFNBQVM7QUFBQSxNQUN2QjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFBQSxHQXhCZTsiLAogICJuYW1lcyI6IFsiUHVibGljS2V5IiwgIlBkYSJdCn0K
// src/collection.ts
var Convert;
((Convert8) => {
  let Collection;
  ((Collection2) => {
    Collection2.intoInfraSide = (input) => {
      if (!input) {
        return null;
      }
      return {
        key: input.toPublicKey(),
        verified: false
      };
    };
    Collection2.intoUserSide = (output) => {
      if (!output) {
        return void 0;
      }
      return {
        address: output.key.toString(),
        verified: output.verified
      };
    };
  })(Collection = Convert8.Collection || (Convert8.Collection = {}));
})(Convert || (Convert = {}));

// src/creators.ts
var Convert2;
((Convert8) => {
  let Creators;
  ((Creators2) => {
    Creators2.intoInfraSide = (input) => {
      if (!input) {
        return null;
      }
      return input.map((data) => {
        let modify = null;
        modify = {
          address: data.address.toPublicKey(),
          share: data.share,
          verified: data.verified
        };
        return modify;
      });
    };
    Creators2.intoUserSide = (output) => {
      if (!output) {
        return void 0;
      }
      return output.map((data) => {
        const modify = {
          address: data.address.toString(),
          share: data.share,
          verified: data.verified
        };
        return modify;
      });
    };
  })(Creators = Convert8.Creators || (Convert8.Creators = {}));
})(Convert2 || (Convert2 = {}));

// src/uses.ts
var Convert3;
((Convert8) => {
  let Uses;
  ((Uses2) => {
    Uses2.intoUserSide = (output) => {
      if (!output) {
        return void 0;
      }
      return output;
    };
  })(Uses = Convert8.Uses || (Convert8.Uses = {}));
})(Convert3 || (Convert3 = {}));

// src/token-metadata.ts
import { convertTimestampToDateTime } from "@solana-suite/shared";
var Convert4;
((Convert8) => {
  let TokenMetadata;
  ((TokenMetadata2) => {
    TokenMetadata2.intoInfraSide = (input, uri, sellerFeeBasisPoints) => {
      return {
        name: input.name,
        symbol: input.symbol,
        uri,
        sellerFeeBasisPoints,
        creators: Convert2.Creators.intoInfraSide(input.creators),
        collection: null,
        uses: input.uses || null
      };
    };
    TokenMetadata2.intoUserSide = (output, tokenAmount) => {
      return {
        mint: output.onchain.mint.toString(),
        royalty: output.onchain.data.sellerFeeBasisPoints,
        name: (0, TokenMetadata2.deleteNullStrings)(output.onchain.data.name),
        symbol: (0, TokenMetadata2.deleteNullStrings)(output.onchain.data.symbol),
        tokenAmount,
        uri: (0, TokenMetadata2.deleteNullStrings)(output.onchain.data.uri),
        creators: Convert2.Creators.intoUserSide(output.onchain.data.creators),
        uses: Convert3.Uses.intoUserSide(output.onchain.uses),
        dateTime: convertTimestampToDateTime(output.offchain.created_at),
        offchain: output.offchain
      };
    };
    TokenMetadata2.deleteNullStrings = (str) => {
      return str.replace(/\0/g, "");
    };
  })(TokenMetadata = Convert8.TokenMetadata || (Convert8.TokenMetadata = {}));
})(Convert4 || (Convert4 = {}));

// src/nft-metadata.ts
import { convertTimestampToDateTime as convertTimestampToDateTime2 } from "@solana-suite/shared";
var Convert5;
((Convert8) => {
  let NftMetadata;
  ((NftMetadata2) => {
    NftMetadata2.intoInfraSide = (input, uri, sellerFeeBasisPoints) => {
      return {
        name: input.name,
        symbol: input.symbol,
        uri,
        sellerFeeBasisPoints,
        creators: Convert2.Creators.intoInfraSide(input.creators),
        collection: Convert.Collection.intoInfraSide(input.collection),
        uses: input.uses || null
      };
    };
    NftMetadata2.intoUserSide = (output, tokenAmount) => {
      return {
        mint: output.onchain.mint.toString(),
        updateAuthority: output.onchain.updateAuthority.toString(),
        royalty: output.onchain.data.sellerFeeBasisPoints,
        name: Convert4.TokenMetadata.deleteNullStrings(output.onchain.data.name),
        symbol: Convert4.TokenMetadata.deleteNullStrings(
          output.onchain.data.symbol
        ),
        tokenAmount,
        uri: Convert4.TokenMetadata.deleteNullStrings(output.onchain.data.uri),
        isMutable: output.onchain.isMutable,
        primarySaleHappened: output.onchain.primarySaleHappened,
        creators: Convert2.Creators.intoUserSide(output.onchain.data.creators),
        editionNonce: output.onchain.editionNonce,
        collection: Convert.Collection.intoUserSide(
          output.onchain.collection
        ),
        uses: Convert3.Uses.intoUserSide(output.onchain.uses),
        dateTime: convertTimestampToDateTime2(output.offchain.created_at),
        offchain: output.offchain
      };
    };
  })(NftMetadata = Convert8.NftMetadata || (Convert8.NftMetadata = {}));
})(Convert5 || (Convert5 = {}));

// src/properties.ts
import { overwriteObject } from "@solana-suite/shared";
var Convert6;
((Convert8) => {
  let Properties;
  ((Properties2) => {
    Properties2.intoInfraSide = async (input, storageFunc, storageType, feePayer) => {
      if (!input || !input.files) {
        return {};
      }
      const files = await Promise.all(
        input.files.map(async (file) => {
          if (!file.filePath) {
            return {};
          }
          const res = await storageFunc(file.filePath, storageType, feePayer);
          if (res.isErr) {
            throw Error(res.error.message);
          }
          return overwriteObject(file, [
            {
              existsKey: "filePath",
              will: { key: "uri", value: res.value }
            }
          ]);
        })
      );
      return { ...input, files };
    };
  })(Properties = Convert8.Properties || (Convert8.Properties = {}));
})(Convert6 || (Convert6 = {}));

// src/index.ts
var Convert7 = {
  ...Convert,
  ...Convert2,
  ...Convert5,
  ...Convert6,
  ...Convert4,
  ...Convert3
};
export {
  Convert7 as Convert
};
//# sourceMappingURL=data:application/json;base64,
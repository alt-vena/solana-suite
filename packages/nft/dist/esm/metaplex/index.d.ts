/// <reference types="@solana/web3.js" />
export declare const Metaplex: {
    transfer: (mint: import("@solana-suite/shared").Pubkey, owner: import("@solana-suite/shared").Pubkey, dest: import("@solana-suite/shared").Pubkey, signers: import("@solana-suite/shared").Secret[], feePayer?: import("@solana-suite/shared").Secret | undefined) => Promise<import("@solana-suite/shared").Result<import("@solana-suite/shared").Instruction, Error>>;
    feePayerPartialSignTransferNft: (mint: import("@solana-suite/shared").Pubkey, owner: import("@solana-suite/shared").Pubkey, dest: import("@solana-suite/shared").Pubkey, signers: import("@solana-suite/shared").Secret[], feePayer: import("@solana-suite/shared").Pubkey) => Promise<import("@solana-suite/shared").Result<import("@solana-suite/shared").PartialSignInstruction, Error>>;
    findByOwner: (owner: import("@solana-suite/shared").Pubkey) => Promise<import("@solana-suite/shared").Result<import("@solana-suite/shared-metaplex").OutputNftMetadata[], Error>>;
    createNftBuilderInstruction: (feePayer: import("@solana-suite/shared").Secret | import("@metaplex-foundation/js").IdentityClient, params: import("@metaplex-foundation/js").CreateNftBuilderParams, useNewMint: import("@solana-suite/shared").Secret, updateAuthority: import("@solana-suite/shared").Secret | import("@metaplex-foundation/js").IdentityClient, mintAuthority: import("@solana-suite/shared").Secret | import("@metaplex-foundation/js").IdentityClient, tokenOwner: import("@solana-suite/shared").Pubkey) => Promise<import("@solana/web3.js").TransactionInstruction[]>;
    mint: (input: import("@solana-suite/shared-metaplex").InputNftMetadata, owner: import("@solana-suite/shared").Secret, feePayer?: import("@solana-suite/shared").Secret | undefined) => Promise<import("@solana-suite/shared").Result<import("@solana-suite/shared").MintInstruction, Error>>;
};

// src/converter/user-side/input.ts
var UserSideInput;
((UserSideInput2) => {
  let TokenStandard;
  ((TokenStandard2) => {
    TokenStandard2[TokenStandard2["NonFungible"] = 0] = "NonFungible";
    TokenStandard2[TokenStandard2["FungibleAsset"] = 1] = "FungibleAsset";
    TokenStandard2[TokenStandard2["Fungible"] = 2] = "Fungible";
    TokenStandard2[TokenStandard2["NonFungibleEdition"] = 3] = "NonFungibleEdition";
    TokenStandard2[TokenStandard2["ProgrammableNonFungible"] = 4] = "ProgrammableNonFungible";
  })(TokenStandard = UserSideInput2.TokenStandard || (UserSideInput2.TokenStandard = {}));
})(UserSideInput || (UserSideInput = {}));

// src/converter/common.ts
var Common;
((Common2) => {
  let UseMethod;
  ((UseMethod2) => {
    UseMethod2[UseMethod2["Burn"] = 0] = "Burn";
    UseMethod2[UseMethod2["Multiple"] = 1] = "Multiple";
    UseMethod2[UseMethod2["Single"] = 2] = "Single";
  })(UseMethod = Common2.UseMethod || (Common2.UseMethod = {}));
})(Common || (Common = {}));

// src/find/index.ts
var Sortable = /* @__PURE__ */ ((Sortable2) => {
  Sortable2["Asc"] = "asc";
  Sortable2["Desc"] = "desc";
  return Sortable2;
})(Sortable || {});

// src/global/index.ts
var Explorer = /* @__PURE__ */ ((Explorer2) => {
  Explorer2["Solscan"] = "solscan";
  Explorer2["SolanaFM"] = "solanafm";
  return Explorer2;
})(Explorer || {});

// src/transaction-filter/index.ts
var FilterType = /* @__PURE__ */ ((FilterType2) => {
  FilterType2["Memo"] = "memo";
  FilterType2["Mint"] = "mint";
  FilterType2["OnlyMemo"] = "only-memo";
  FilterType2["Transfer"] = "transfer";
  return FilterType2;
})(FilterType || {});
var ModuleName = /* @__PURE__ */ ((ModuleName2) => {
  ModuleName2["SolNative"] = "system";
  ModuleName2["SplToken"] = "spl-token";
  return ModuleName2;
})(ModuleName || {});
var FilterOptions = {
  Transfer: {
    program: ["system", "spl-token"],
    action: ["transfer", "transferChecked"]
  },
  Memo: {
    program: ["spl-memo"],
    action: ["*"]
  },
  Mint: {
    program: ["spl-token"],
    action: ["mintTo", "mintToChecked"]
  }
};
export {
  Common,
  Explorer,
  FilterOptions,
  FilterType,
  ModuleName,
  Sortable,
  UserSideInput
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2NvbnZlcnRlci91c2VyLXNpZGUvaW5wdXQudHMiLCAiLi4vc3JjL2NvbnZlcnRlci9jb21tb24udHMiLCAiLi4vc3JjL2ZpbmQvaW5kZXgudHMiLCAiLi4vc3JjL2dsb2JhbC9pbmRleC50cyIsICIuLi9zcmMvdHJhbnNhY3Rpb24tZmlsdGVyL2luZGV4LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBTdG9yYWdlVHlwZSB9IGZyb20gJy4uLy4uL3N0b3JhZ2UnO1xuaW1wb3J0IHsgYmlnbnVtLCBDb21tb24gfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgUHVia2V5IH0gZnJvbSAnLi4vLi4vYWNjb3VudCc7XG5pbXBvcnQgeyBGaWxlVHlwZSB9IGZyb20gJy4uLy4uL3N0b3JhZ2UnO1xuXG5leHBvcnQgbmFtZXNwYWNlIFVzZXJTaWRlSW5wdXQge1xuICBleHBvcnQgdHlwZSBDb2xsZWN0aW9uID0gUHVia2V5O1xuXG4gIGV4cG9ydCB0eXBlIENyZWF0b3JzID0ge1xuICAgIGFkZHJlc3M6IFB1YmtleTtcbiAgICBzaGFyZTogbnVtYmVyO1xuICAgIHZlcmlmaWVkOiBib29sZWFuO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIFByb3BlcnRpZXMgPSBDb21tb24uUHJvcGVydGllcztcblxuICBleHBvcnQgZW51bSBUb2tlblN0YW5kYXJkIHtcbiAgICBOb25GdW5naWJsZSA9IDAsXG4gICAgRnVuZ2libGVBc3NldCA9IDEsXG4gICAgRnVuZ2libGUgPSAyLFxuICAgIE5vbkZ1bmdpYmxlRWRpdGlvbiA9IDMsXG4gICAgUHJvZ3JhbW1hYmxlTm9uRnVuZ2libGUgPSA0LFxuICB9XG5cbiAgZXhwb3J0IHR5cGUgTmZ0TWV0YWRhdGEgPSB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN5bWJvbDogc3RyaW5nO1xuICAgIHJveWFsdHk6IG51bWJlcjtcbiAgICBzdG9yYWdlVHlwZT86IFN0b3JhZ2VUeXBlO1xuICAgIGZpbGVQYXRoPzogRmlsZVR5cGU7XG4gICAgdXJpPzogc3RyaW5nO1xuICAgIGlzTXV0YWJsZT86IGJvb2xlYW47XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgZXh0ZXJuYWxfdXJsPzogc3RyaW5nO1xuICAgIGF0dHJpYnV0ZXM/OiBDb21tb24uQXR0cmlidXRlW107XG4gICAgcHJvcGVydGllcz86IFByb3BlcnRpZXM7XG4gICAgbWF4U3VwcGx5PzogYmlnbnVtO1xuICAgIGNyZWF0b3JzPzogQ3JlYXRvcnNbXTtcbiAgICB1c2VzPzogQ29tbW9uLlVzZXM7XG4gICAgY29sbGVjdGlvbj86IENvbGxlY3Rpb247XG4gICAgb3B0aW9ucz86IENvbW1vbi5PcHRpb25zO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIFRva2VuTWV0YWRhdGEgPSB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN5bWJvbDogc3RyaW5nO1xuICAgIGZpbGVQYXRoPzogRmlsZVR5cGU7XG4gICAgdXJpPzogc3RyaW5nO1xuICAgIHN0b3JhZ2VUeXBlPzogU3RvcmFnZVR5cGU7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgcm95YWx0eT86IG51bWJlcjtcbiAgICB1c2VzPzogQ29tbW9uLlVzZXM7XG4gICAgY3JlYXRvcnM/OiBDcmVhdG9yc1tdO1xuICAgIGF0dHJpYnV0ZXM/OiBDb21tb24uQXR0cmlidXRlW107XG4gICAgb3B0aW9ucz86IENvbW1vbi5PcHRpb25zO1xuICB9O1xufVxuIiwgImltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5pbXBvcnQgeyBGaWxlVHlwZSB9IGZyb20gJy4uL3N0b3JhZ2UnO1xuXG5leHBvcnQgdHlwZSBPcHRpb248VD4gPSBUIHwgbnVsbDtcbmV4cG9ydCB0eXBlIGJpZ251bSA9IG51bWJlciB8IEJOO1xuXG5leHBvcnQgbmFtZXNwYWNlIENvbW1vbiB7XG4gIGV4cG9ydCB0eXBlIFByb3BlcnRpZXMgPSB7XG4gICAgY3JlYXRvcnM/OiB7XG4gICAgICBhZGRyZXNzPzogc3RyaW5nO1xuICAgICAgc2hhcmU/OiBudW1iZXI7XG4gICAgICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xuICAgIH1bXTtcbiAgICBmaWxlcz86IHtcbiAgICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgICBmaWxlUGF0aD86IEZpbGVUeXBlO1xuICAgICAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbiAgICB9W107XG4gICAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBBdHRyaWJ1dGUgPSB7XG4gICAgdHJhaXRfdHlwZT86IHN0cmluZztcbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIFVzZU1ldGhvZCB7XG4gICAgQnVybiA9IDAsXG4gICAgTXVsdGlwbGUgPSAxLFxuICAgIFNpbmdsZSA9IDIsXG4gIH1cblxuICBleHBvcnQgdHlwZSBVc2VzID0ge1xuICAgIHVzZU1ldGhvZDogVXNlTWV0aG9kO1xuICAgIHJlbWFpbmluZzogYmlnbnVtO1xuICAgIHRvdGFsOiBiaWdudW07XG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgT3B0aW9ucyA9IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9O1xufVxuIiwgImV4cG9ydCBlbnVtIFNvcnRhYmxlIHtcbiAgQXNjID0gJ2FzYycsXG4gIERlc2MgPSAnZGVzYycsXG59XG5cbmV4cG9ydCB0eXBlIEZpbmQgPSB7XG4gIHNvbD86IHN0cmluZztcbiAgYWNjb3VudD86IHN0cmluZztcbiAgZGVzdGluYXRpb24/OiBQdWJrZXk7XG4gIHNvdXJjZT86IFB1YmtleTtcbiAgYXV0aG9yaXR5PzogUHVia2V5O1xuICBtdWx0aXNpZ0F1dGhvcml0eT86IFB1YmtleTtcbiAgc2lnbmVycz86IFB1YmtleVtdO1xuICBtaW50PzogUHVia2V5O1xuICBtaW50QXV0aG9yaXR5PzogUHVia2V5O1xuICB0b2tlbkFtb3VudD86IHN0cmluZztcbiAgbWVtbz86IHN0cmluZztcbiAgZGF0ZVRpbWU/OiBEYXRlO1xuICB0eXBlPzogc3RyaW5nO1xuICBzaWc/OiBzdHJpbmc7XG4gIGlubmVySW5zdHJ1Y3Rpb24/OiBib29sZWFuO1xufTtcbiIsICJpbXBvcnQgeyBLZXlwYWlyLCBQdWJsaWNLZXkgfSBmcm9tICdAc29sYW5hL3dlYjMuanMnO1xuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgU3RyaW5nIHtcbiAgICB0b1B1YmxpY0tleSgpOiBQdWJsaWNLZXk7XG4gICAgdG9LZXlwYWlyKCk6IEtleXBhaXI7XG4gICAgdG9FeHBsb3JlclVybChleHBsb3Jlcj86IEV4cGxvcmVyKTogc3RyaW5nO1xuICB9XG4gIGludGVyZmFjZSBOdW1iZXIge1xuICAgIHRvU29sKCk6IG51bWJlcjtcbiAgICB0b0xhbXBvcnRzKCk6IG51bWJlcjtcbiAgfVxuXG4gIGludGVyZmFjZSBDb25zb2xlIHtcbiAgICBkZWJ1ZyhkYXRhOiB1bmtub3duLCBkYXRhMj86IHVua25vd24sIGRhdGEzPzogdW5rbm93bik6IHZvaWQ7XG4gIH1cblxuICBpbnRlcmZhY2UgU2VjcmV0IHtcbiAgICB0b0tleXBhaXIoKTogS2V5cGFpcjtcbiAgfVxuXG4gIGludGVyZmFjZSBQdWJrZXkge1xuICAgIHRvUHVibGljS2V5KCk6IFB1YmxpY0tleTtcbiAgfVxufVxuXG5leHBvcnQgZW51bSBFeHBsb3JlciB7XG4gIFNvbHNjYW4gPSAnc29sc2NhbicsXG4gIFNvbGFuYUZNID0gJ3NvbGFuYWZtJyxcbn1cbiIsICJleHBvcnQgZW51bSBGaWx0ZXJUeXBlIHtcbiAgTWVtbyA9ICdtZW1vJyxcbiAgTWludCA9ICdtaW50JyxcbiAgT25seU1lbW8gPSAnb25seS1tZW1vJyxcbiAgVHJhbnNmZXIgPSAndHJhbnNmZXInLFxufVxuXG5leHBvcnQgZW51bSBNb2R1bGVOYW1lIHtcbiAgU29sTmF0aXZlID0gJ3N5c3RlbScsXG4gIFNwbFRva2VuID0gJ3NwbC10b2tlbicsXG59XG5cbmV4cG9ydCBjb25zdCBGaWx0ZXJPcHRpb25zID0ge1xuICBUcmFuc2Zlcjoge1xuICAgIHByb2dyYW06IFsnc3lzdGVtJywgJ3NwbC10b2tlbiddLFxuICAgIGFjdGlvbjogWyd0cmFuc2ZlcicsICd0cmFuc2ZlckNoZWNrZWQnXSxcbiAgfSxcbiAgTWVtbzoge1xuICAgIHByb2dyYW06IFsnc3BsLW1lbW8nXSxcbiAgICBhY3Rpb246IFsnKiddLFxuICB9LFxuICBNaW50OiB7XG4gICAgcHJvZ3JhbTogWydzcGwtdG9rZW4nXSxcbiAgICBhY3Rpb246IFsnbWludFRvJywgJ21pbnRUb0NoZWNrZWQnXSxcbiAgfSxcbn07XG5cbmV4cG9ydCB0eXBlIFBvc3RUb2tlbkFjY291bnQgPSB7XG4gIGFjY291bnQ6IHN0cmluZztcbiAgb3duZXI6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFdpdGhNZW1vID0ge1xuICBzaWc6IHN0cmluZ1tdO1xuICBtZW1vOiBzdHJpbmc7XG59O1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUtPLElBQVU7QUFBQSxDQUFWLENBQVVBLG1CQUFWO0FBV0UsTUFBSztBQUFMLElBQUtDLG1CQUFMO0FBQ0wsSUFBQUEsOEJBQUEsaUJBQWMsS0FBZDtBQUNBLElBQUFBLDhCQUFBLG1CQUFnQixLQUFoQjtBQUNBLElBQUFBLDhCQUFBLGNBQVcsS0FBWDtBQUNBLElBQUFBLDhCQUFBLHdCQUFxQixLQUFyQjtBQUNBLElBQUFBLDhCQUFBLDZCQUEwQixLQUExQjtBQUFBLEtBTFUsZ0JBQUFELGVBQUEsa0JBQUFBLGVBQUE7QUFBQSxHQVhHOzs7QUNDVixJQUFVO0FBQUEsQ0FBVixDQUFVRSxZQUFWO0FBcUJFLE1BQUs7QUFBTCxJQUFLQyxlQUFMO0FBQ0wsSUFBQUEsc0JBQUEsVUFBTyxLQUFQO0FBQ0EsSUFBQUEsc0JBQUEsY0FBVyxLQUFYO0FBQ0EsSUFBQUEsc0JBQUEsWUFBUyxLQUFUO0FBQUEsS0FIVSxZQUFBRCxRQUFBLGNBQUFBLFFBQUE7QUFBQSxHQXJCRzs7O0FDTlYsSUFBSyxXQUFMLGtCQUFLRSxjQUFMO0FBQ0wsRUFBQUEsVUFBQSxTQUFNO0FBQ04sRUFBQUEsVUFBQSxVQUFPO0FBRkcsU0FBQUE7QUFBQSxHQUFBOzs7QUN5QkwsSUFBSyxXQUFMLGtCQUFLQyxjQUFMO0FBQ0wsRUFBQUEsVUFBQSxhQUFVO0FBQ1YsRUFBQUEsVUFBQSxjQUFXO0FBRkQsU0FBQUE7QUFBQSxHQUFBOzs7QUN6QkwsSUFBSyxhQUFMLGtCQUFLQyxnQkFBTDtBQUNMLEVBQUFBLFlBQUEsVUFBTztBQUNQLEVBQUFBLFlBQUEsVUFBTztBQUNQLEVBQUFBLFlBQUEsY0FBVztBQUNYLEVBQUFBLFlBQUEsY0FBVztBQUpELFNBQUFBO0FBQUEsR0FBQTtBQU9MLElBQUssYUFBTCxrQkFBS0MsZ0JBQUw7QUFDTCxFQUFBQSxZQUFBLGVBQVk7QUFDWixFQUFBQSxZQUFBLGNBQVc7QUFGRCxTQUFBQTtBQUFBLEdBQUE7QUFLTCxJQUFNLGdCQUFnQjtBQUFBLEVBQzNCLFVBQVU7QUFBQSxJQUNSLFNBQVMsQ0FBQyxVQUFVLFdBQVc7QUFBQSxJQUMvQixRQUFRLENBQUMsWUFBWSxpQkFBaUI7QUFBQSxFQUN4QztBQUFBLEVBQ0EsTUFBTTtBQUFBLElBQ0osU0FBUyxDQUFDLFVBQVU7QUFBQSxJQUNwQixRQUFRLENBQUMsR0FBRztBQUFBLEVBQ2Q7QUFBQSxFQUNBLE1BQU07QUFBQSxJQUNKLFNBQVMsQ0FBQyxXQUFXO0FBQUEsSUFDckIsUUFBUSxDQUFDLFVBQVUsZUFBZTtBQUFBLEVBQ3BDO0FBQ0Y7IiwKICAibmFtZXMiOiBbIlVzZXJTaWRlSW5wdXQiLCAiVG9rZW5TdGFuZGFyZCIsICJDb21tb24iLCAiVXNlTWV0aG9kIiwgIlNvcnRhYmxlIiwgIkV4cGxvcmVyIiwgIkZpbHRlclR5cGUiLCAiTW9kdWxlTmFtZSJdCn0K
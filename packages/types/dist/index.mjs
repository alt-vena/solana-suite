// src/converter/user-side/input.ts
var UserSideInput;
((UserSideInput2) => {
  let TokenStandard;
  ((TokenStandard2) => {
    TokenStandard2[TokenStandard2["NonFungible"] = 0] = "NonFungible";
    TokenStandard2[TokenStandard2["FungibleAsset"] = 1] = "FungibleAsset";
    TokenStandard2[TokenStandard2["Fungible"] = 2] = "Fungible";
    TokenStandard2[TokenStandard2["NonFungibleEdition"] = 3] = "NonFungibleEdition";
    TokenStandard2[TokenStandard2["ProgrammableNonFungible"] = 4] = "ProgrammableNonFungible";
  })(TokenStandard = UserSideInput2.TokenStandard || (UserSideInput2.TokenStandard = {}));
})(UserSideInput || (UserSideInput = {}));

// src/converter/common.ts
var Common;
((Common2) => {
  let UseMethod;
  ((UseMethod2) => {
    UseMethod2[UseMethod2["Burn"] = 0] = "Burn";
    UseMethod2[UseMethod2["Multiple"] = 1] = "Multiple";
    UseMethod2[UseMethod2["Single"] = 2] = "Single";
  })(UseMethod = Common2.UseMethod || (Common2.UseMethod = {}));
})(Common || (Common = {}));

// src/core/find.ts
var Sortable = /* @__PURE__ */ ((Sortable2) => {
  Sortable2["Asc"] = "asc";
  Sortable2["Desc"] = "desc";
  return Sortable2;
})(Sortable || {});

// src/core/transaction-filter.ts
var FilterType = /* @__PURE__ */ ((FilterType2) => {
  FilterType2["Memo"] = "memo";
  FilterType2["Mint"] = "mint";
  FilterType2["OnlyMemo"] = "only-memo";
  FilterType2["Transfer"] = "transfer";
  return FilterType2;
})(FilterType || {});
var ModuleName = /* @__PURE__ */ ((ModuleName2) => {
  ModuleName2["SolNative"] = "system";
  ModuleName2["SplToken"] = "spl-token";
  return ModuleName2;
})(ModuleName || {});
var FilterOptions = {
  Transfer: {
    program: ["system", "spl-token"],
    action: ["transfer", "transferChecked"]
  },
  Memo: {
    program: ["spl-memo"],
    action: ["*"]
  },
  Mint: {
    program: ["spl-token"],
    action: ["mintTo", "mintToChecked"]
  }
};

// src/global/index.ts
var Explorer = /* @__PURE__ */ ((Explorer2) => {
  Explorer2["Solscan"] = "solscan";
  Explorer2["SolanaFM"] = "solanafm";
  return Explorer2;
})(Explorer || {});
export {
  Common,
  Explorer,
  FilterOptions,
  FilterType,
  ModuleName,
  Sortable,
  UserSideInput
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2NvbnZlcnRlci91c2VyLXNpZGUvaW5wdXQudHMiLCAiLi4vc3JjL2NvbnZlcnRlci9jb21tb24udHMiLCAiLi4vc3JjL2NvcmUvZmluZC50cyIsICIuLi9zcmMvY29yZS90cmFuc2FjdGlvbi1maWx0ZXIudHMiLCAiLi4vc3JjL2dsb2JhbC9pbmRleC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgU3RvcmFnZVR5cGUgfSBmcm9tICcuLi8uLi9zdG9yYWdlJztcbmltcG9ydCB7IENvbW1vbiwgYmlnbnVtLCBGaWxlQ29udGVudCB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBQdWJrZXkgfSBmcm9tICcuLi8uLi9hY2NvdW50JztcblxuZXhwb3J0IG5hbWVzcGFjZSBVc2VyU2lkZUlucHV0IHtcbiAgZXhwb3J0IHR5cGUgQ29sbGVjdGlvbiA9IFB1YmtleTtcblxuICBleHBvcnQgdHlwZSBDcmVhdG9ycyA9IHtcbiAgICBhZGRyZXNzOiBQdWJrZXk7XG4gICAgc2hhcmU6IG51bWJlcjtcbiAgICB2ZXJpZmllZDogYm9vbGVhbjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBQcm9wZXJ0aWVzID0gQ29tbW9uLlByb3BlcnRpZXM7XG5cbiAgZXhwb3J0IGVudW0gVG9rZW5TdGFuZGFyZCB7XG4gICAgTm9uRnVuZ2libGUgPSAwLFxuICAgIEZ1bmdpYmxlQXNzZXQgPSAxLFxuICAgIEZ1bmdpYmxlID0gMixcbiAgICBOb25GdW5naWJsZUVkaXRpb24gPSAzLFxuICAgIFByb2dyYW1tYWJsZU5vbkZ1bmdpYmxlID0gNCxcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIE5mdE1ldGFkYXRhID0ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzeW1ib2w6IHN0cmluZztcbiAgICByb3lhbHR5OiBudW1iZXI7XG4gICAgc3RvcmFnZVR5cGU/OiBTdG9yYWdlVHlwZTtcbiAgICBmaWxlUGF0aD86IEZpbGVDb250ZW50O1xuICAgIHVyaT86IHN0cmluZztcbiAgICBpc011dGFibGU/OiBib29sZWFuO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIGV4dGVybmFsX3VybD86IHN0cmluZztcbiAgICBhdHRyaWJ1dGVzPzogQ29tbW9uLkF0dHJpYnV0ZVtdO1xuICAgIHByb3BlcnRpZXM/OiBQcm9wZXJ0aWVzO1xuICAgIG1heFN1cHBseT86IGJpZ251bTtcbiAgICBjcmVhdG9ycz86IENyZWF0b3JzW107XG4gICAgdXNlcz86IENvbW1vbi5Vc2VzO1xuICAgIGNvbGxlY3Rpb24/OiBDb2xsZWN0aW9uO1xuICAgIG9wdGlvbnM/OiBDb21tb24uT3B0aW9ucztcbiAgfTtcblxuICBleHBvcnQgdHlwZSBUb2tlbk1ldGFkYXRhID0ge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzeW1ib2w6IHN0cmluZztcbiAgICBmaWxlUGF0aD86IEZpbGVDb250ZW50O1xuICAgIHVyaT86IHN0cmluZztcbiAgICBzdG9yYWdlVHlwZT86IFN0b3JhZ2VUeXBlO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHJveWFsdHk/OiBudW1iZXI7XG4gICAgdXNlcz86IENvbW1vbi5Vc2VzO1xuICAgIGNyZWF0b3JzPzogQ3JlYXRvcnNbXTtcbiAgICBhdHRyaWJ1dGVzPzogQ29tbW9uLkF0dHJpYnV0ZVtdO1xuICAgIG9wdGlvbnM/OiBDb21tb24uT3B0aW9ucztcbiAgfTtcbn1cbiIsICJpbXBvcnQgQk4gZnJvbSAnYm4uanMnO1xuXG5leHBvcnQgdHlwZSBPcHRpb248VD4gPSBUIHwgbnVsbDtcbmV4cG9ydCB0eXBlIGJpZ251bSA9IG51bWJlciB8IEJOO1xuZXhwb3J0IHR5cGUgRmlsZUNvbnRlbnQgPSBzdHJpbmcgfCBCdWZmZXIgfCBVaW50OEFycmF5IHwgQXJyYXlCdWZmZXI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29tbW9uIHtcbiAgZXhwb3J0IHR5cGUgUHJvcGVydGllcyA9IHtcbiAgICBjcmVhdG9ycz86IHtcbiAgICAgIGFkZHJlc3M/OiBzdHJpbmc7XG4gICAgICBzaGFyZT86IG51bWJlcjtcbiAgICAgIFtrZXk6IHN0cmluZ106IHVua25vd247XG4gICAgfVtdO1xuICAgIGZpbGVzPzoge1xuICAgICAgdHlwZT86IHN0cmluZztcbiAgICAgIGZpbGVQYXRoPzogRmlsZUNvbnRlbnQ7XG4gICAgICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xuICAgIH1bXTtcbiAgICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEF0dHJpYnV0ZSA9IHtcbiAgICB0cmFpdF90eXBlPzogc3RyaW5nO1xuICAgIHZhbHVlPzogc3RyaW5nO1xuICAgIFtrZXk6IHN0cmluZ106IHVua25vd247XG4gIH07XG5cbiAgZXhwb3J0IGVudW0gVXNlTWV0aG9kIHtcbiAgICBCdXJuID0gMCxcbiAgICBNdWx0aXBsZSA9IDEsXG4gICAgU2luZ2xlID0gMixcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFVzZXMgPSB7XG4gICAgdXNlTWV0aG9kOiBVc2VNZXRob2Q7XG4gICAgcmVtYWluaW5nOiBiaWdudW07XG4gICAgdG90YWw6IGJpZ251bTtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBPcHRpb25zID0geyBba2V5OiBzdHJpbmddOiB1bmtub3duIH07XG59XG4iLCAiaW1wb3J0IHsgVXNlclNpZGVPdXRwdXQgfSBmcm9tICcuLi9jb252ZXJ0ZXInO1xuXG5leHBvcnQgZW51bSBTb3J0YWJsZSB7XG4gIEFzYyA9ICdhc2MnLFxuICBEZXNjID0gJ2Rlc2MnLFxufVxuXG5leHBvcnQgdHlwZSBUb2tlbk1ldGFkYXRhID0gVXNlclNpZGVPdXRwdXQuVG9rZW5NZXRhZGF0YTtcbiIsICJleHBvcnQgZW51bSBGaWx0ZXJUeXBlIHtcbiAgTWVtbyA9ICdtZW1vJyxcbiAgTWludCA9ICdtaW50JyxcbiAgT25seU1lbW8gPSAnb25seS1tZW1vJyxcbiAgVHJhbnNmZXIgPSAndHJhbnNmZXInLFxufVxuXG5leHBvcnQgZW51bSBNb2R1bGVOYW1lIHtcbiAgU29sTmF0aXZlID0gJ3N5c3RlbScsXG4gIFNwbFRva2VuID0gJ3NwbC10b2tlbicsXG59XG5cbmV4cG9ydCBjb25zdCBGaWx0ZXJPcHRpb25zID0ge1xuICBUcmFuc2Zlcjoge1xuICAgIHByb2dyYW06IFsnc3lzdGVtJywgJ3NwbC10b2tlbiddLFxuICAgIGFjdGlvbjogWyd0cmFuc2ZlcicsICd0cmFuc2ZlckNoZWNrZWQnXSxcbiAgfSxcbiAgTWVtbzoge1xuICAgIHByb2dyYW06IFsnc3BsLW1lbW8nXSxcbiAgICBhY3Rpb246IFsnKiddLFxuICB9LFxuICBNaW50OiB7XG4gICAgcHJvZ3JhbTogWydzcGwtdG9rZW4nXSxcbiAgICBhY3Rpb246IFsnbWludFRvJywgJ21pbnRUb0NoZWNrZWQnXSxcbiAgfSxcbn07XG5cbmV4cG9ydCB0eXBlIFBvc3RUb2tlbkFjY291bnQgPSB7XG4gIGFjY291bnQ6IHN0cmluZztcbiAgb3duZXI6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFdpdGhNZW1vID0ge1xuICBzaWc6IHN0cmluZ1tdO1xuICBtZW1vOiBzdHJpbmc7XG59O1xuIiwgImltcG9ydCB7IEtleXBhaXIsIFB1YmxpY0tleSB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcyc7XG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBTdHJpbmcge1xuICAgIHRvUHVibGljS2V5KCk6IFB1YmxpY0tleTtcbiAgICB0b0tleXBhaXIoKTogS2V5cGFpcjtcbiAgICB0b0V4cGxvcmVyVXJsKGV4cGxvcmVyPzogRXhwbG9yZXIpOiBzdHJpbmc7XG4gIH1cbiAgaW50ZXJmYWNlIE51bWJlciB7XG4gICAgdG9Tb2woKTogbnVtYmVyO1xuICAgIHRvTGFtcG9ydHMoKTogbnVtYmVyO1xuICB9XG5cbiAgaW50ZXJmYWNlIENvbnNvbGUge1xuICAgIGRlYnVnKGRhdGE6IHVua25vd24sIGRhdGEyPzogdW5rbm93biwgZGF0YTM/OiB1bmtub3duKTogdm9pZDtcbiAgfVxuXG4gIGludGVyZmFjZSBTZWNyZXQge1xuICAgIHRvS2V5cGFpcigpOiBLZXlwYWlyO1xuICB9XG5cbiAgaW50ZXJmYWNlIFB1YmtleSB7XG4gICAgdG9QdWJsaWNLZXkoKTogUHVibGljS2V5O1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIEV4cGxvcmVyIHtcbiAgU29sc2NhbiA9ICdzb2xzY2FuJyxcbiAgU29sYW5hRk0gPSAnc29sYW5hZm0nLFxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUlPLElBQVU7QUFBQSxDQUFWLENBQVVBLG1CQUFWO0FBV0UsTUFBSztBQUFMLElBQUtDLG1CQUFMO0FBQ0wsSUFBQUEsOEJBQUEsaUJBQWMsS0FBZDtBQUNBLElBQUFBLDhCQUFBLG1CQUFnQixLQUFoQjtBQUNBLElBQUFBLDhCQUFBLGNBQVcsS0FBWDtBQUNBLElBQUFBLDhCQUFBLHdCQUFxQixLQUFyQjtBQUNBLElBQUFBLDhCQUFBLDZCQUEwQixLQUExQjtBQUFBLEtBTFUsZ0JBQUFELGVBQUEsa0JBQUFBLGVBQUE7QUFBQSxHQVhHOzs7QUNFVixJQUFVO0FBQUEsQ0FBVixDQUFVRSxZQUFWO0FBcUJFLE1BQUs7QUFBTCxJQUFLQyxlQUFMO0FBQ0wsSUFBQUEsc0JBQUEsVUFBTyxLQUFQO0FBQ0EsSUFBQUEsc0JBQUEsY0FBVyxLQUFYO0FBQ0EsSUFBQUEsc0JBQUEsWUFBUyxLQUFUO0FBQUEsS0FIVSxZQUFBRCxRQUFBLGNBQUFBLFFBQUE7QUFBQSxHQXJCRzs7O0FDSlYsSUFBSyxXQUFMLGtCQUFLRSxjQUFMO0FBQ0wsRUFBQUEsVUFBQSxTQUFNO0FBQ04sRUFBQUEsVUFBQSxVQUFPO0FBRkcsU0FBQUE7QUFBQSxHQUFBOzs7QUNGTCxJQUFLLGFBQUwsa0JBQUtDLGdCQUFMO0FBQ0wsRUFBQUEsWUFBQSxVQUFPO0FBQ1AsRUFBQUEsWUFBQSxVQUFPO0FBQ1AsRUFBQUEsWUFBQSxjQUFXO0FBQ1gsRUFBQUEsWUFBQSxjQUFXO0FBSkQsU0FBQUE7QUFBQSxHQUFBO0FBT0wsSUFBSyxhQUFMLGtCQUFLQyxnQkFBTDtBQUNMLEVBQUFBLFlBQUEsZUFBWTtBQUNaLEVBQUFBLFlBQUEsY0FBVztBQUZELFNBQUFBO0FBQUEsR0FBQTtBQUtMLElBQU0sZ0JBQWdCO0FBQUEsRUFDM0IsVUFBVTtBQUFBLElBQ1IsU0FBUyxDQUFDLFVBQVUsV0FBVztBQUFBLElBQy9CLFFBQVEsQ0FBQyxZQUFZLGlCQUFpQjtBQUFBLEVBQ3hDO0FBQUEsRUFDQSxNQUFNO0FBQUEsSUFDSixTQUFTLENBQUMsVUFBVTtBQUFBLElBQ3BCLFFBQVEsQ0FBQyxHQUFHO0FBQUEsRUFDZDtBQUFBLEVBQ0EsTUFBTTtBQUFBLElBQ0osU0FBUyxDQUFDLFdBQVc7QUFBQSxJQUNyQixRQUFRLENBQUMsVUFBVSxlQUFlO0FBQUEsRUFDcEM7QUFDRjs7O0FDQU8sSUFBSyxXQUFMLGtCQUFLQyxjQUFMO0FBQ0wsRUFBQUEsVUFBQSxhQUFVO0FBQ1YsRUFBQUEsVUFBQSxjQUFXO0FBRkQsU0FBQUE7QUFBQSxHQUFBOyIsCiAgIm5hbWVzIjogWyJVc2VyU2lkZUlucHV0IiwgIlRva2VuU3RhbmRhcmQiLCAiQ29tbW9uIiwgIlVzZU1ldGhvZCIsICJTb3J0YWJsZSIsICJGaWx0ZXJUeXBlIiwgIk1vZHVsZU5hbWUiLCAiRXhwbG9yZXIiXQp9Cg==